variables:
  SONARQUBE_URL: 'https://sonarqube.u-cloudsolutions.xyz'
  SONARQUBE_TOKEN: 'squ_b730e6c811798750f5442b5ec90950a58600c316'
  SONARQUBE_PROJECT_KEY: 'my-next-project'
  SONARQUBE_PROJECT_NAME: 'my-next-project'

  NEXUS_CREDENTIALS_ID: "nexus-jenkins"
  NEXUS_URL: "https://nexus.u-cloudsolutions.xyz"
  NEXUS_REPOSITORY: "student-repository"
  GROUP_ID: "com.artificial.Nest-JS"
  ARTIFACT_ID: "artifact"
  ZIP_FILE_NAME: '${ARTIFACT_ID}-${COMMIT_ID}.zip'
  COMMIT_ID: $(git rev-parse --short HEAD)
  SLACK_WEBHOOK_URL: 'https://hooks.slack.com/services/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'



stages:
  - checkout
  - install
  - build
  - test
  - quality
  - quality_gate
  - package
  - upload

.slack_notification:
  script:
    - |
      curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"$SLACK_MESSAGE\"}" \
        $SLACK_WEBHOOK_URL

checkout:
  stage: checkout
  tags:
    - shell
  script:
    - echo "Checking out the repository"
    - git rev-parse --short HEAD > commit_hash.txt
    - export COMMIT_ID=$(cat commit_hash.txt)
    - export ZIP_FILE_NAME="${ARTIFACT_ID}-${COMMIT_ID}.zip"
  after_script:
    - |
      if [ $? -eq 0 ]; then
        SLACK_MESSAGE="Checkout succeeded in pipeline $CI_PIPELINE_ID"
      else
        SLACK_MESSAGE="Checkout failed in pipeline $CI_PIPELINE_ID"
      fi
      curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"$SLACK_MESSAGE\"}" \
        $SLACK_WEBHOOK_URL

install_dependencies:
  stage: install
  script:
    - rm -rf  node_modules
    - npm install  # Clean install dependencies based on package-lock.json
  tags:
    - docker-node
  after_script:
    -  apk add --no-cache curl
    - |
      if [ $? -eq 0 ]; then
        SLACK_MESSAGE="install_dependencies succeeded in pipeline $CI_PIPELINE_ID"
      else
        SLACK_MESSAGE="install_dependencies failed in pipeline $CI_PIPELINE_ID"
      fi
      curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"$SLACK_MESSAGE\"}" \
        $SLACK_WEBHOOK_URL

build:
  stage: build
  script:
    - npm install
    - npm run build  # Explicitly run the Nest CLI
  tags:
    - docker-node
  after_script:
    -  apk add --no-cache curl
    - |
      if [ $? -eq 0 ]; then
        SLACK_MESSAGE="build succeeded in pipeline $CI_PIPELINE_ID"
      else
        SLACK_MESSAGE="build failed in pipeline $CI_PIPELINE_ID"
      fi
      curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"$SLACK_MESSAGE\"}" \
        $SLACK_WEBHOOK_URL



unit_tests:
  stage: test
  script:
    - npm install
    - npm run build

    - npm run test  # Run the test script defined in your package.json
  tags:
    - docker-node
  after_script:
    -  apk add --no-cache curl
    - |
      if [ $? -eq 0 ]; then
        SLACK_MESSAGE="unit_tests succeeded in pipeline $CI_PIPELINE_ID"
      else
        SLACK_MESSAGE="unit_tests failed in pipeline $CI_PIPELINE_ID"
      fi
      curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"$SLACK_MESSAGE\"}" \
        $SLACK_WEBHOOK_URL

quality:
  stage: quality
  tags:
    - sonar
  script:
    - echo "Running code quality check via SonarQube"
    - sonar-scanner -X -Dsonar.projectKey=${SONARQUBE_PROJECT_KEY} -Dsonar.sources=. -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.login=${SONARQUBE_TOKEN} -Dsonar.exclusions=vendor/**
  after_script:
    - |
      if [ $? -eq 0 ]; then
        SLACK_MESSAGE="quality succeeded in pipeline $CI_PIPELINE_ID"
      else
        SLACK_MESSAGE="quality failed in pipeline $CI_PIPELINE_ID"
      fi
      curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"$SLACK_MESSAGE\"}" \
        $SLACK_WEBHOOK_URL
  


quality_gate:
  stage: quality_gate
  tags:
    - sonar
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Waiting for SonarQube quality gate..."
    - sleep 60
    - echo "Checking SonarQube quality gate status"
    - |
      RESPONSE=$(curl -s -u ${SONARQUBE_TOKEN}: \
        "${SONARQUBE_URL}/api/qualitygates/project_status?projectKey=${SONARQUBE_PROJECT_KEY}")
      if echo "$RESPONSE" | grep -q '"status":"OK"'; then
        echo "Quality gate passed"
      else
        echo "Quality gate failed"
        exit 1
      fi
  after_script:
    - |
      if [ $? -eq 0 ]; then
        SLACK_MESSAGE="quality_gate succeeded in pipeline $CI_PIPELINE_ID"
      else
        SLACK_MESSAGE="quality_gate failed in pipeline $CI_PIPELINE_ID"
      fi
      curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"$SLACK_MESSAGE\"}" \
        $SLACK_WEBHOOK_URL





package:
  stage: package
  tags:
    - shell
  script:
    - echo "Cleaning up old ZIP files..."
    - rm -f artifact-*.zip
    - echo "Packaging project..."
    - COMMIT_ID=$(git rev-parse --short HEAD)
    - ZIP_FILE_NAME="artifact-${COMMIT_ID}.zip"
    - echo "Packaging project as ${ZIP_FILE_NAME}..."
    - zip -r ${ZIP_FILE_NAME} .
    - ls -l ${ZIP_FILE_NAME}
  after_script:
    - |
      if [ $? -eq 0 ]; then
        SLACK_MESSAGE="package succeeded in pipeline $CI_PIPELINE_ID"
      else
        SLACK_MESSAGE="package failed in pipeline $CI_PIPELINE_ID"
      fi
      curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"$SLACK_MESSAGE\"}" \
        $SLACK_WEBHOOK_URL

  artifacts:
    paths:
      - artifact-*.zip


upload:
  stage: upload
  tags:
    - shell
  script:
    - echo "Determining commit ID..."
    - COMMIT_ID=$(git rev-parse --short HEAD)
    - ZIP_FILE_NAME="artifact-${COMMIT_ID}.zip"
    - echo "Uploading ${ZIP_FILE_NAME} to Nexus..."
    - UPLOAD_URL="${NEXUS_URL}/repository/${NEXUS_REPOSITORY}/${GROUP_ID//./\/}/${ARTIFACT_ID}/${COMMIT_ID}/${ZIP_FILE_NAME}"
    - pwd  # Print working directory
    - find . -name "*.zip"  # Find ZIP files
    - ls -l ${ZIP_FILE_NAME}  # Verify file existence
    - curl -u wissem:3FqNnJ6XzF --upload-file "${ZIP_FILE_NAME}" "${UPLOAD_URL}"
  after_script:
    - |
      if [ $? -eq 0 ]; then
        SLACK_MESSAGE="upload succeeded in pipeline $CI_PIPELINE_ID"
      else
        SLACK_MESSAGE="upload failed in pipeline $CI_PIPELINE_ID"
      fi
      curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"$SLACK_MESSAGE\"}" \
        $SLACK_WEBHOOK_URL

